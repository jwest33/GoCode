# GoCode Example Configuration - Task API Tutorial
# This config is optimized for the task-api walkthrough example
#
# SETUP: Copy this file to your tutorial directory as 'config.yaml'
# Or set GOCODE_CONFIG environment variable to point to this file

# Local LLM Configuration
llm:
  endpoint: "http://localhost:8080/v1"
  api_key: "secret"
  model: "qwen"
  temperature: 0.7
  max_tokens: 4096
  context_window: 102400

  # llama-server Auto-Management
  auto_manage: true
  startup_timeout: 60

  # llama-server Configuration
  # NOTE: Update model_path to match your actual model location
  server:
    model_path: "C:\\models\\your-model.gguf"  # CHANGE THIS to your model
    host: "0.0.0.0"
    port: 8080
    ctx_size: 102400
    flash_attn: true
    jinja: true
    cache_type_k: "q8_0"
    cache_type_v: "q8_0"
    batch_size: 1024
    ubatch_size: 512
    n_cpu_moe: 28
    n_gpu_layers: 99
    repeat_last_n: 192
    repeat_penalty: 1.05
    threads: 16

# Tool Configuration - All essential tools enabled
tools:
  enabled:
    - read
    - write
    - edit
    - glob
    - grep
    - bash
    - bash_output
    - kill_shell
    - todo_write
    - web_fetch
    - web_search
    - lsp_find_definition      # LSP features enabled
    - lsp_find_references      # for code navigation
    - lsp_list_symbols

# Confirmation Policies - Interactive mode for learning
confirmation:
  mode: "interactive"  # Shows what tools the agent is using
  auto_approve_tools:
    - read
    - glob
    - grep
    - lsp_find_definition
    - lsp_find_references
    - lsp_list_symbols
  always_confirm_tools:
    - write
    - edit
    - bash

# Logging Configuration - Track agent's actions
logging:
  format: "jsonl"
  directory: "logs"
  level: "info"
  log_tool_results: true
  log_reasoning: true

# Embeddings Configuration - Optional for this example
embeddings:
  enabled: false  # Not required for the tutorial
  endpoint: "http://localhost:8081"
  dimension: 384
  db_path: "embeddings.db"

# Retrieval Configuration - Optional for this example
retrieval:
  enabled: false  # Small project doesn't need retrieval
  weights:
    bm25: 0.4
    semantic: 0.5
    trigram: 0.1

# LSP Configuration - ENABLED for Go code navigation
# This is a key feature demonstrated in Phase 4 of the walkthrough
lsp:
  enabled: true  # REQUIRED for the tutorial
  servers:
    go:
      command: "gopls"
      args: []
    # python:
    #   command: "pylsp"
    #   args: []
    # typescript:
    #   command: "typescript-language-server"
    #   args: ["--stdio"]

# Checkpoint Configuration - ENABLED for session persistence
# This is demonstrated in Phase 6 of the walkthrough
checkpoint:
  enabled: true  # REQUIRED for Phase 6
  db_path: "checkpoints.db"
  auto_save: true
  save_interval: 5  # Auto-save every 5 messages

# Memory Configuration - ENABLED for long-term context
# This helps the agent remember design decisions across the tutorial
memory:
  enabled: true  # RECOMMENDED for the tutorial
  db_path: "memory.db"

# Telemetry Configuration - Optional
telemetry:
  enabled: false  # Optional, useful for analyzing agent performance
  service_name: "gocode-task-api-example"
  db_path: "traces.db"

# Evaluation Configuration - Optional
evaluation:
  enabled: false
  track_metrics: true

# Tutorial-Specific Notes:
#
# BEFORE STARTING:
# 1. Verify gopls is installed: gopls version
# 2. Update llm.server.model_path above to your actual model
# 3. Ensure you're in an empty directory for the tutorial
#
# DURING THE TUTORIAL:
# - Phase 1-3: Basic tools (read, write, edit, bash)
# - Phase 4: LSP integration (requires lsp.enabled: true)
# - Phase 5: Testing and debugging (bash tool)
# - Phase 6: Session management (requires checkpoint.enabled: true)
#
# TROUBLESHOOTING:
# - If LSP not working: verify gopls is in PATH
# - If checkpointing fails: ensure checkpoints.db can be created
# - If memory issues: disable embeddings and retrieval
